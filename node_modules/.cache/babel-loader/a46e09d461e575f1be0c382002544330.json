{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\n\nconst has_1 = __importDefault(require(\"lodash/has\"));\n\nconst utils_1 = require(\"@chevrotain/utils\");\n\nconst parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\n\n\nclass PerformanceTracer {\n  initPerformanceTracer(config) {\n    if ((0, has_1.default)(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf; // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT(phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n\n      const {\n        time,\n        value\n      } = (0, utils_1.timer)(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n      const traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n\n}\n\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,MAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,iBAAb,CAA8B;AAK5B,EAAA,qBAAqB,CAAC,MAAD,EAAsB;AACzC,QAAI,CAAA,GAAA,KAAA,CAAA,OAAA,EAAI,MAAJ,EAAY,eAAZ,CAAJ,EAAkC;AAChC,YAAM,iBAAiB,GAAG,MAAM,CAAC,aAAjC;AACA,YAAM,aAAa,GAAG,OAAO,iBAAP,KAA6B,QAAnD;AACA,WAAK,iBAAL,GAAyB,aAAa,GAC1B,iBAD0B,GAElC,QAFJ;AAGA,WAAK,aAAL,GAAqB,aAAa,GAC9B,iBAAiB,GAAG,CADU,GAE7B,iBAFL,CANgC,CAQG;AACpC,KATD,MASO;AACL,WAAK,iBAAL,GAAyB,CAAzB;AACA,WAAK,aAAL,GAAqB,QAAA,CAAA,qBAAA,CAAsB,aAA3C;AACD;;AAED,SAAK,eAAL,GAAuB,CAAC,CAAxB;AACD;;AAED,EAAA,UAAU,CAAyB,SAAzB,EAA4C,SAA5C,EAA8D;AACtE;AACA;AACA,QAAI,KAAK,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,WAAK,eAAL;AACA,YAAM,MAAM,GAAG,IAAI,KAAJ,CAAU,KAAK,eAAL,GAAuB,CAAjC,EAAoC,IAApC,CAAyC,IAAzC,CAAf;;AACA,UAAI,KAAK,eAAL,GAAuB,KAAK,iBAAhC,EAAmD;AACjD,QAAA,OAAO,CAAC,GAAR,CAAY,GAAG,MAAM,QAAQ,SAAS,GAAtC;AACD;;AACD,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,UAAkB,CAAA,GAAA,OAAA,CAAA,KAAA,EAAM,SAAN,CAAxB;AACA;;AACA,YAAM,WAAW,GAAG,IAAI,GAAG,EAAP,GAAY,OAAO,CAAC,IAApB,GAA2B,OAAO,CAAC,GAAvD;;AACA,UAAI,KAAK,eAAL,GAAuB,KAAK,iBAAhC,EAAmD;AACjD,QAAA,WAAW,CAAC,GAAG,MAAM,QAAQ,SAAS,WAAW,IAAI,IAA1C,CAAX;AACD;;AACD,WAAK,eAAL;AACA,aAAO,KAAP;AACD,KAdD,MAcO;AACL,aAAO,SAAS,EAAhB;AACD;AACF;;AA3C2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PerformanceTracer = void 0;\nconst has_1 = __importDefault(require(\"lodash/has\"));\nconst utils_1 = require(\"@chevrotain/utils\");\nconst parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nclass PerformanceTracer {\n    initPerformanceTracer(config) {\n        if ((0, has_1.default)(config, \"traceInitPerf\")) {\n            const userTraceInitPerf = config.traceInitPerf;\n            const traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf; // assumes end user provides the correct config value/type\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(`${indent}--> <${phaseDesc}>`);\n            }\n            const { time, value } = (0, utils_1.timer)(phaseImpl);\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            const traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    }\n}\nexports.PerformanceTracer = PerformanceTracer;\n//# sourceMappingURL=perf_tracer.js.map"]},"metadata":{},"sourceType":"script"}