{"ast":null,"code":"import * as e from \"react\";\nexport function createContext(t) {\n  const r = /*#__PURE__*/e.createContext(null);\n\n  function n(t) {\n    const {\n      children: n,\n      ...o\n    } = t,\n          u = e.useMemo(() => o, Object.values(o));\n    /*#__PURE__*/\n\n    return e.createElement(r.Provider, {\n      value: u\n    }, n);\n  }\n\n  return n.displayName = t + \"Provider\", [n, function (n) {\n    const o = e.useContext(r);\n    if (null === o) throw new Error(`\\`${n}\\` must be used within \\`${t}\\``);\n    return o;\n  }];\n}","map":{"version":3,"sources":["packages/react/context/src/createContext.tsx"],"names":["createContext","rootComponentName","Context","React","Provider","props","children","providerProps","value","useMemo","Object","values","_react","consumerName","context","useContext","Error","displayName"],"mappings":";OAEA,SAASA,aAAT,CAAwDC,CAAxD,EAAwDA;AACtD,QAAMC,CAAAA,GAAAA,aAAUC,CAAAA,CAAMH,aAANG,CAAsC,IAAtCA,CAAhB;;AAEA,WAASC,CAAT,CAAkBC,CAAlB,EAAkBA;AAChB,UAAA;AAAMC,MAAAA,QAAAA,EAAEA,CAAR;AAAQA,SAAaC;AAArB,QAAuCF,CAAvC;AAAA,UAEMG,CAAAA,GAAQL,CAAAA,CAAMM,OAANN,CACZ,MAAMI,CADMJ,EAGZO,MAAAA,CAAOC,MAAPD,CAAcH,CAAdG,CAHYP,CAFd;AAKgBI;;AAEhB,WAAOK,CAAAA,CAAAA,aAAAA,CAACV,CAAAA,CAAQE,QAATQ,EAAAA;AAAkBJ,MAAAA,KAAAA,EAAOA;AAAzBI,KAAAA,EAAiCN,CAAjCM,CAAP;AAYF;;AAAA,SADAR,CAAAA,CAASa,WAATb,GAAuBH,CAAAA,GAAoB,UAA3CG,EACO,CAACA,CAAD,EATP,UAAoBS,CAApB,EAAoBA;AAClB,UAAMC,CAAAA,GAAUX,CAAAA,CAAMY,UAANZ,CAAiBD,CAAjBC,CAAhB;AACA,QAAgB,SAAZW,CAAJ,EACE,MAAM,IAAIE,KAAJ,CAAW,KAAIH,CAAAA,4BAAwCZ,CAAAA,IAAvD,CAAN;AAEF,WAAOa,CAAP;AAAOA,GAIF,CAAP;AAJSA","sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object>(rootComponentName: string) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]},"metadata":{},"sourceType":"module"}