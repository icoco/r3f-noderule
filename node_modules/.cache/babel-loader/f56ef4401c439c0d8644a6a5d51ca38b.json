{"ast":null,"code":"export function observeElementRect(n, o) {\n  const a = e.get(n);\n  return void 0 === a ? (e.set(n, {\n    rect: {},\n    callbacks: [o]\n  }), 1 === e.size && (t = requestAnimationFrame(c))) : a.callbacks.push(o), () => {\n    const c = e.get(n);\n    if (void 0 === c) return;\n    const a = c.callbacks.indexOf(o);\n    a > -1 && c.callbacks.splice(a, 1), 0 === c.callbacks.length && (e.delete(n), 0 === e.size && cancelAnimationFrame(t));\n  };\n}\nlet t;\nconst e = new Map();\n\nfunction c() {\n  const n = [];\n  e.forEach((t, e) => {\n    const c = e.getBoundingClientRect();\n    var o, a;\n    o = t.rect, a = c, (o.width !== a.width || o.height !== a.height || o.top !== a.top || o.right !== a.right || o.bottom !== a.bottom || o.left !== a.left) && (t.rect = c, n.push(t));\n  }), n.forEach(t => {\n    t.callbacks.forEach(e => e(t.rect));\n  }), t = requestAnimationFrame(c);\n}","map":{"version":3,"sources":["packages/core/rect/src/observeElementRect.ts"],"names":["observeElementRect","elementToObserve","callback","observedData","observedElements","get","undefined","set","rect","callbacks","size","rafId","requestAnimationFrame","runLoop","push","index","indexOf","splice","length","delete","cancelAnimationFrame","Map","changedRectsData","forEach","data","element","newRect","getBoundingClientRect","rect1","rect2","width","height","top","right","bottom","left"],"mappings":"OAOA,SAASA,kBAAT,CAEEC,CAFF,EAIEC,CAJF,EAIEA;AAEA,QAAMC,CAAAA,GAAeC,CAAAA,CAAiBC,GAAjBD,CAAqBH,CAArBG,CAArB;AAgBA,SAAA,KAdqBE,CAcrB,KAdIH,CAcJ,IAXEC,CAAAA,CAAiBG,GAAjBH,CAAqBH,CAArBG,EAAuC;AAAEI,IAAAA,IAAAA,EAAM,EAAR;AAA0BC,IAAAA,SAAAA,EAAW,CAACP,CAAD;AAArC,GAAvCE,GAE8B,MAA1BA,CAAAA,CAAiBM,IAAS,KAE5BC,CAAAA,GAAQC,qBAAAA,CAAsBC,CAAtBD,CAFoB,CAShC,IAHET,CAAAA,CAAaM,SAAbN,CAAuBW,IAAvBX,CAA4BD,CAA5BC,CAGF,EAAO,MAAA;AACL,UAAMA,CAAAA,GAAeC,CAAAA,CAAiBC,GAAjBD,CAAqBH,CAArBG,CAArB;AACA,QAAA,KAAqBE,CAArB,KAAIH,CAAJ,EAAgC;AAGhC,UAAMY,CAAAA,GAAQZ,CAAAA,CAAaM,SAAbN,CAAuBa,OAAvBb,CAA+BD,CAA/BC,CAAd;AACIY,IAAAA,CAAAA,GAAAA,CAAS,CAATA,IACFZ,CAAAA,CAAaM,SAAbN,CAAuBc,MAAvBd,CAA8BY,CAA9BZ,EAAqC,CAArCA,CADEY,EAIkC,MAAlCZ,CAAAA,CAAaM,SAAbN,CAAuBe,MAAW,KAGpCd,CAAAA,CAAiBe,MAAjBf,CAAwBH,CAAxBG,GAE8B,MAA1BA,CAAAA,CAAiBM,IAAS,IAE5BU,oBAAAA,CAAqBT,CAArBS,CAPkC,CAJlCL;AAWqBJ,GAjB3B;AAiCF;AAAA,IAAIA,CAAJ;AACA,MAAMP,CAAAA,GAAkD,IAAIiB,GAAJ,EAAxD;;AAEA,SAASR,CAAT,GAASA;AACP,QAAMS,CAAAA,GAAwC,EAA9C;AAGAlB,EAAAA,CAAAA,CAAiBmB,OAAjBnB,CAAyB,CAACoB,CAAD,EAAOC,CAAP,KAAOA;AAC9B,UAAMC,CAAAA,GAAUD,CAAAA,CAAQE,qBAARF,EAAhB;AAsBJ,QAAoBG,CAApB,EAAuCC,CAAvC;AAAoBD,IAAAA,CAAAA,GAnBAJ,CAAAA,CAAKhB,IAmBLoB,EAAmBC,CAAAA,GAnBRH,CAmBXE,EAnBWF,CAqB3BE,CAAAA,CAAME,KAANF,KAAgBC,CAAAA,CAAMC,KAAtBF,IACAA,CAAAA,CAAMG,MAANH,KAAiBC,CAAAA,CAAME,MADvBH,IAEAA,CAAAA,CAAMI,GAANJ,KAAcC,CAAAA,CAAMG,GAFpBJ,IAGAA,CAAAA,CAAMK,KAANL,KAAgBC,CAAAA,CAAMI,KAHtBL,IAIAA,CAAAA,CAAMM,MAANN,KAAiBC,CAAAA,CAAMK,MAJvBN,IAKAA,CAAAA,CAAMO,IAANP,KAAeC,CAAAA,CAAMM,IA1BMT,MACzBF,CAAAA,CAAKhB,IAALgB,GAAYE,CAAZF,EACAF,CAAAA,CAAiBR,IAAjBQ,CAAsBE,CAAtBF,CAFyBI,CAmBXE;AAjBQJ,GAN1BpB,GAYAkB,CAAAA,CAAiBC,OAAjBD,CAA0BE,CAAAA,IAAAA;AACxBA,IAAAA,CAAAA,CAAKf,SAALe,CAAeD,OAAfC,CAAwBtB,CAAAA,IAAaA,CAAAA,CAASsB,CAAAA,CAAKhB,IAAdN,CAArCsB;AAAmDhB,GADrDc,CAZAlB,EAgBAO,CAAAA,GAAQC,qBAAAA,CAAsBC,CAAtBD,CAhBRR;AAgB8BS","sourcesContent":["type Measurable = { getBoundingClientRect(): ClientRect };\n\n/**\n * Observes an element's rectangle on screen (getBoundingClientRect)\n * This is useful to track elements on the screen and attach other elements\n * that might be in different layers, etc.\n */\nfunction observeElementRect(\n  /** The element whose rect to observe */\n  elementToObserve: Measurable,\n  /** The callback which will be called when the rect changes */\n  callback: CallbackFn\n) {\n  const observedData = observedElements.get(elementToObserve);\n\n  if (observedData === undefined) {\n    // add the element to the map of observed elements with its first callback\n    // because this is the first time this element is observed\n    observedElements.set(elementToObserve, { rect: {} as ClientRect, callbacks: [callback] });\n\n    if (observedElements.size === 1) {\n      // start the internal loop once at least 1 element is observed\n      rafId = requestAnimationFrame(runLoop);\n    }\n  } else {\n    // only add a callback for this element as it's already observed\n    observedData.callbacks.push(callback);\n  }\n\n  return () => {\n    const observedData = observedElements.get(elementToObserve);\n    if (observedData === undefined) return;\n\n    // start by removing the callback\n    const index = observedData.callbacks.indexOf(callback);\n    if (index > -1) {\n      observedData.callbacks.splice(index, 1);\n    }\n\n    if (observedData.callbacks.length === 0) {\n      // stop observing this element because there are no\n      // callbacks registered for it anymore\n      observedElements.delete(elementToObserve);\n\n      if (observedElements.size === 0) {\n        // stop the internal loop once no elements are observed anymore\n        cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\n\n// ========================================================================\n// module internals\n\ntype CallbackFn = (rect: ClientRect) => void;\n\ntype ObservedData = {\n  rect: ClientRect;\n  callbacks: Array<CallbackFn>;\n};\n\nlet rafId: number;\nconst observedElements: Map<Measurable, ObservedData> = new Map();\n\nfunction runLoop() {\n  const changedRectsData: Array<ObservedData> = [];\n\n  // process all DOM reads first (getBoundingClientRect)\n  observedElements.forEach((data, element) => {\n    const newRect = element.getBoundingClientRect();\n\n    // gather all the data for elements whose rects have changed\n    if (!rectEquals(data.rect, newRect)) {\n      data.rect = newRect;\n      changedRectsData.push(data);\n    }\n  });\n\n  // group DOM writes here after the DOM reads (getBoundingClientRect)\n  // as DOM writes will most likely happen with the callbacks\n  changedRectsData.forEach((data) => {\n    data.callbacks.forEach((callback) => callback(data.rect));\n  });\n\n  rafId = requestAnimationFrame(runLoop);\n}\n// ========================================================================\n\n/**\n * Returns whether 2 rects are equal in values\n */\nfunction rectEquals(rect1: ClientRect, rect2: ClientRect) {\n  return (\n    rect1.width === rect2.width &&\n    rect1.height === rect2.height &&\n    rect1.top === rect2.top &&\n    rect1.right === rect2.right &&\n    rect1.bottom === rect2.bottom &&\n    rect1.left === rect2.left\n  );\n}\n\nexport { observeElementRect };\nexport type { Measurable };\n"]},"metadata":{},"sourceType":"module"}