{"ast":null,"code":"'use strict';\n\nvar isObject = require('is-extendable');\n\nvar merge = require('mixin-deep');\n\nvar get = require('get-value');\n\nvar set = require('set-value');\n\nmodule.exports = function mergeValue(obj, prop, value) {\n  if (!isObject(obj)) {\n    throw new TypeError('expected an object');\n  }\n\n  if (typeof prop !== 'string' || value == null) {\n    return merge.apply(null, arguments);\n  }\n\n  if (typeof value === 'string') {\n    set(obj, prop, value);\n    return obj;\n  }\n\n  var current = get(obj, prop);\n\n  if (isObject(value) && isObject(current)) {\n    value = merge({}, current, value);\n  }\n\n  set(obj, prop, value);\n  return obj;\n};","map":{"version":3,"sources":["/Users/icoco/Workspace/2022/prj/webgl/r3f-app/node_modules/merge-value/index.js"],"names":["isObject","require","merge","get","set","module","exports","mergeValue","obj","prop","value","TypeError","apply","arguments","current"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,WAAD,CAAjB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AACrD,MAAI,CAACV,QAAQ,CAACQ,GAAD,CAAb,EAAoB;AAClB,UAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;AACD;;AAED,MAAI,OAAOF,IAAP,KAAgB,QAAhB,IAA4BC,KAAK,IAAI,IAAzC,EAA+C;AAC7C,WAAOR,KAAK,CAACU,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACD;;AAED,MAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7BN,IAAAA,GAAG,CAACI,GAAD,EAAMC,IAAN,EAAYC,KAAZ,CAAH;AACA,WAAOF,GAAP;AACD;;AAED,MAAIM,OAAO,GAAGX,GAAG,CAACK,GAAD,EAAMC,IAAN,CAAjB;;AACA,MAAIT,QAAQ,CAACU,KAAD,CAAR,IAAmBV,QAAQ,CAACc,OAAD,CAA/B,EAA0C;AACxCJ,IAAAA,KAAK,GAAGR,KAAK,CAAC,EAAD,EAAKY,OAAL,EAAcJ,KAAd,CAAb;AACD;;AAEDN,EAAAA,GAAG,CAACI,GAAD,EAAMC,IAAN,EAAYC,KAAZ,CAAH;AACA,SAAOF,GAAP;AACD,CArBD","sourcesContent":["'use strict';\n\nvar isObject = require('is-extendable');\nvar merge = require('mixin-deep');\nvar get = require('get-value');\nvar set = require('set-value');\n\nmodule.exports = function mergeValue(obj, prop, value) {\n  if (!isObject(obj)) {\n    throw new TypeError('expected an object');\n  }\n\n  if (typeof prop !== 'string' || value == null) {\n    return merge.apply(null, arguments);\n  }\n\n  if (typeof value === 'string') {\n    set(obj, prop, value);\n    return obj;\n  }\n\n  var current = get(obj, prop);\n  if (isObject(value) && isObject(current)) {\n    value = merge({}, current, value);\n  }\n\n  set(obj, prop, value);\n  return obj;\n};\n"]},"metadata":{},"sourceType":"script"}