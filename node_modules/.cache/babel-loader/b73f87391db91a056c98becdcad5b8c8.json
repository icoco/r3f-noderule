{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EarlyExitException = exports.NotAllInputParsedException = exports.NoViableAltException = exports.MismatchedTokenException = exports.isRecognitionException = void 0;\n\nconst includes_1 = __importDefault(require(\"lodash/includes\"));\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nconst RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES); // hacks to bypass no support for custom Errors in javascript/typescript\n\nfunction isRecognitionException(error) {\n  // can't do instanceof on hacked custom js exceptions\n  return (0, includes_1.default)(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nexports.isRecognitionException = isRecognitionException;\n\nclass RecognitionException extends Error {\n  constructor(message, token) {\n    super(message);\n    this.token = token;\n    this.resyncedTokens = []; // fix prototype chain when typescript target is ES5\n\n    Object.setPrototypeOf(this, new.target.prototype);\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n}\n\nclass MismatchedTokenException extends RecognitionException {\n  constructor(message, token, previousToken) {\n    super(message, token);\n    this.previousToken = previousToken;\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n\n}\n\nexports.MismatchedTokenException = MismatchedTokenException;\n\nclass NoViableAltException extends RecognitionException {\n  constructor(message, token, previousToken) {\n    super(message, token);\n    this.previousToken = previousToken;\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n\n}\n\nexports.NoViableAltException = NoViableAltException;\n\nclass NotAllInputParsedException extends RecognitionException {\n  constructor(message, token) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n\n}\n\nexports.NotAllInputParsedException = NotAllInputParsedException;\n\nclass EarlyExitException extends RecognitionException {\n  constructor(message, token, previousToken) {\n    super(message, token);\n    this.previousToken = previousToken;\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n\n}\n\nexports.EarlyExitException = EarlyExitException;","map":{"version":3,"sources":["../../../src/parse/exceptions_public.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAOA,MAAM,0BAA0B,GAAG,0BAAnC;AACA,MAAM,uBAAuB,GAAG,sBAAhC;AACA,MAAM,oBAAoB,GAAG,oBAA7B;AACA,MAAM,8BAA8B,GAAG,4BAAvC;AAEA,MAAM,2BAA2B,GAAG,CAClC,0BADkC,EAElC,uBAFkC,EAGlC,oBAHkC,EAIlC,8BAJkC,CAApC;AAOA,MAAM,CAAC,MAAP,CAAc,2BAAd,E,CAEA;;AACA,SAAgB,sBAAhB,CAAuC,KAAvC,EAAmD;AACjD;AACA,SAAO,CAAA,GAAA,UAAA,CAAA,OAAA,EAAS,2BAAT,EAAsC,KAAK,CAAC,IAA5C,CAAP;AACD;;AAHD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAKA,MAAe,oBAAf,SACU,KADV,CACe;AAMb,EAAA,WAAA,CAAsB,OAAtB,EAA8C,KAA9C,EAA2D;AACzD,UAAM,OAAN;AAD4C,SAAA,KAAA,GAAA,KAAA;AAF9C,SAAA,cAAA,GAA2B,EAA3B,CAE2D,CAGzD;;AACA,IAAA,MAAM,CAAC,cAAP,CAAsB,IAAtB,EAA4B,GAAG,CAAC,MAAJ,CAAW,SAAvC;AAEA;;AACA,QAAI,KAAK,CAAC,iBAAV,EAA6B;AAC3B,MAAA,KAAK,CAAC,iBAAN,CAAwB,IAAxB,EAA8B,KAAK,WAAnC;AACD;AACF;;AAhBY;;AAmBf,MAAa,wBAAb,SAA8C,oBAA9C,CAAkE;AAChE,EAAA,WAAA,CAAY,OAAZ,EAA6B,KAA7B,EAAmD,aAAnD,EAAwE;AACtE,UAAM,OAAN,EAAe,KAAf;AADiD,SAAA,aAAA,GAAA,aAAA;AAEjD,SAAK,IAAL,GAAY,0BAAZ;AACD;;AAJ+D;;AAAlE,OAAA,CAAA,wBAAA,GAAA,wBAAA;;AAOA,MAAa,oBAAb,SAA0C,oBAA1C,CAA8D;AAC5D,EAAA,WAAA,CAAY,OAAZ,EAA6B,KAA7B,EAAmD,aAAnD,EAAwE;AACtE,UAAM,OAAN,EAAe,KAAf;AADiD,SAAA,aAAA,GAAA,aAAA;AAEjD,SAAK,IAAL,GAAY,uBAAZ;AACD;;AAJ2D;;AAA9D,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAOA,MAAa,0BAAb,SAAgD,oBAAhD,CAAoE;AAClE,EAAA,WAAA,CAAY,OAAZ,EAA6B,KAA7B,EAA0C;AACxC,UAAM,OAAN,EAAe,KAAf;AACA,SAAK,IAAL,GAAY,8BAAZ;AACD;;AAJiE;;AAApE,OAAA,CAAA,0BAAA,GAAA,0BAAA;;AAOA,MAAa,kBAAb,SAAwC,oBAAxC,CAA4D;AAC1D,EAAA,WAAA,CAAY,OAAZ,EAA6B,KAA7B,EAAmD,aAAnD,EAAwE;AACtE,UAAM,OAAN,EAAe,KAAf;AADiD,SAAA,aAAA,GAAA,aAAA;AAEjD,SAAK,IAAL,GAAY,oBAAZ;AACD;;AAJyD;;AAA5D,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EarlyExitException = exports.NotAllInputParsedException = exports.NoViableAltException = exports.MismatchedTokenException = exports.isRecognitionException = void 0;\nconst includes_1 = __importDefault(require(\"lodash/includes\"));\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nconst RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nfunction isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return (0, includes_1.default)(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexports.isRecognitionException = isRecognitionException;\nclass RecognitionException extends Error {\n    constructor(message, token) {\n        super(message);\n        this.token = token;\n        this.resyncedTokens = [];\n        // fix prototype chain when typescript target is ES5\n        Object.setPrototypeOf(this, new.target.prototype);\n        /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nclass MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n}\nexports.MismatchedTokenException = MismatchedTokenException;\nclass NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n}\nexports.NoViableAltException = NoViableAltException;\nclass NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n        super(message, token);\n        this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n}\nexports.NotAllInputParsedException = NotAllInputParsedException;\nclass EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = EARLY_EXIT_EXCEPTION;\n    }\n}\nexports.EarlyExitException = EarlyExitException;\n//# sourceMappingURL=exceptions_public.js.map"]},"metadata":{},"sourceType":"script"}