{"ast":null,"code":"import { observeElementRect as t } from \"@radix-ui/rect\";\nimport * as r from \"react\";\nexport function useRect(e) {\n  const [o, c] = r.useState();\n  return r.useEffect(() => {\n    if (e) {\n      const r = t(e, c);\n      return () => {\n        c(void 0), r();\n      };\n    }\n  }, [e]), o;\n}","map":{"version":3,"sources":["packages/react/use-rect/src/useRect.tsx"],"names":["useRect","measurable","rect","setRect","React","useState","useEffect","unobserve","observeElementRect","undefined"],"mappings":";;OASA,SAASA,OAAT,CAAiBC,CAAjB,EAAiBA;AACf,QAAA,CAAOC,CAAP,EAAaC,CAAb,IAAwBC,CAAAA,CAAMC,QAAND,EAAxB;AAWA,SAVAA,CAAAA,CAAME,SAANF,CAAgB,MAAA;AACd,QAAIH,CAAJ,EAAgB;AACd,YAAMM,CAAAA,GAAYC,CAAAA,CAAmBP,CAAnBO,EAA+BL,CAA/BK,CAAlB;AACA,aAAO,MAAA;AACLL,QAAAA,CAAAA,CAAAA,KAAQM,CAARN,CAAAA,EACAI,CAAAA,EADAJ;AACAI,OAFF;AAEEA;AAAAA,GALNH,EASG,CAACH,CAAD,CATHG,GAUOF,CAAP;AAAOA","sourcesContent":["import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(measurable: Measurable | null) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  React.useEffect(() => {\n    if (measurable) {\n      const unobserve = observeElementRect(measurable, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [measurable]);\n  return rect;\n}\n\nexport { useRect };\n"]},"metadata":{},"sourceType":"module"}