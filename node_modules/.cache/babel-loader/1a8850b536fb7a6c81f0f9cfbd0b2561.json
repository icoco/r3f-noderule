{"ast":null,"code":"import * as e from \"react\";\nimport r from \"@babel/runtime/helpers/esm/extends\";\nconst t = {\n  prefix: Math.round(1e10 * Math.random()),\n  current: 0\n},\n      n = /*#__PURE__*/e.createContext(t);\nexport const IdProvider = o => {\n  const i = e.useContext(n),\n        s = i === t,\n        a = e.useMemo(() => ({\n    prefix: s ? 0 : ++i.prefix,\n    current: 0\n  }), [s, i]);\n  /*#__PURE__*/\n\n  return e.createElement(n.Provider, r({\n    value: a\n  }, o));\n};\nexport function useId(r) {\n  const o = e.useContext(n);\n  return Boolean(null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || o !== t || console.warn(\"When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server.\"), e.useMemo(() => r || `radix-id-${o.prefix}-${++o.current}`, [r]);\n}","map":{"version":3,"sources":["packages/react/id/src/id.tsx"],"names":["defaultIdContext","prefix","Math","round","random","current","IdContext","React","createContext","IdProvider","props","currentContext","useContext","isRootIdProvider","context","useMemo","_react","$ae65c4aca36d67ac05042d6e17501$var$IdContext","Provider","value","useId","deterministicId","Boolean","globalThis","document","console","warn"],"mappings":";;AAUA,MAAMA,CAAAA,GAAmC;AACvCC,EAAAA,MAAAA,EAAQC,IAAAA,CAAKC,KAALD,CAA2B,OAAhBA,IAAAA,CAAKE,MAALF,EAAXA,CAD+B;AAEvCG,EAAAA,OAAAA,EAAS;AAF8B,CAAzC;AAAA,MAKMC,CAAAA,GAAAA,aAAYC,CAAAA,CAAMC,aAAND,CAAoCP,CAApCO,CALlB;AAKsDP,OAEtD,MAAMS,UAAAA,GAAwBC,CAAAA,IAAAA;AAC5B,QAAMC,CAAAA,GAAiBJ,CAAAA,CAAMK,UAANL,CAAiBD,CAAjBC,CAAvB;AAAA,QACMM,CAAAA,GAAmBF,CAAAA,KAAmBX,CAD5C;AAAA,QAEMc,CAAAA,GAA0BP,CAAAA,CAAMQ,OAANR,CAC9B,OAAA;AACEN,IAAAA,MAAAA,EAAQY,CAAAA,GAAmB,CAAnBA,GAAmB,EAAMF,CAAAA,CAAeV,MADlD;AAEEI,IAAAA,OAAAA,EAAS;AAFX,GAAA,CAD8BE,EAK9B,CAACM,CAAD,EAAmBF,CAAnB,CAL8BJ,CAFhC;AAOqBI;;AAGrB,SAAOK,CAAAA,CAAAA,aAAAA,CAACC,CAAAA,CAAUC,QAAXF,EAAAA,CAAAA,CAAAA;AAAoBG,IAAAA,KAAAA,EAAOL;AAA3BE,GAAAA,EAAwCN,CAAxCM,CAAAA,CAAP;AAA+CN,CAXjD;AAWiDA,OAGjD,SAASU,KAAT,CAAeC,CAAf,EAAeA;AACb,QAAMP,CAAAA,GAAUP,CAAAA,CAAMK,UAANL,CAAiBD,CAAjBC,CAAhB;AASA,SARkBe,OAAAA,CAAO,SAACC,UAAD,IAACA,KAAD,CAACA,KAAAA,UAAD,GAACA,KAAD,CAAA,GAACA,UAAAA,CAAYC,QAApBF,CAAAA,IAEAR,CAAAA,KAAYd,CAFZsB,IAGhBG,OAAAA,CAAQC,IAARD,CACE,gJADFA,CAHgBH,EAQXf,CAAAA,CAAMQ,OAANR,CACL,MAAMc,CAAAA,IAAoB,YAAWP,CAAAA,CAAQb,MAAAA,IAAAA,EAAYa,CAAAA,CAAQT,OAAAA,EAD5DE,EAGL,CAACc,CAAD,CAHKd,CAAP;AAGGc","sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n// See: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/ssr/src/SSRProvider.tsx\n\nimport * as React from 'react';\n\ntype IdContextValue = {\n  prefix: number;\n  current: number;\n};\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n};\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext);\n\nconst IdProvider: React.FC = (props) => {\n  const currentContext = React.useContext(IdContext);\n  const isRootIdProvider = currentContext === defaultIdContext;\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRootIdProvider ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRootIdProvider, currentContext]\n  );\n\n  return <IdContext.Provider value={context} {...props} />;\n};\n\nfunction useId(deterministicId?: string): string {\n  const context = React.useContext(IdContext);\n  const isBrowser = Boolean(globalThis?.document);\n\n  if (!isBrowser && context === defaultIdContext) {\n    console.warn(\n      'When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server.'\n    );\n  }\n\n  return React.useMemo(\n    () => deterministicId || `radix-id-${context.prefix}-${++context.current}`,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deterministicId]\n  );\n}\n\nexport { IdProvider, useId };\n"]},"metadata":{},"sourceType":"module"}