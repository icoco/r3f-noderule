{"ast":null,"code":"import { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers as t } from \"@radix-ui/primitive\";\nimport * as r from \"react\";\nimport o from \"@babel/runtime/helpers/esm/extends\";\nexport const Slot = /*#__PURE__*/r.forwardRef((e, t) => {\n  const {\n    children: l,\n    ...i\n  } = e;\n  return 1 === r.Children.count(l) ? /*#__PURE__*/r.createElement(n, o({}, i, {\n    ref: t\n  }), l) : /*#__PURE__*/r.createElement(r.Fragment, null, r.Children.map(l, e => /*#__PURE__*/r.isValidElement(e) && e.type === Slottable ? /*#__PURE__*/r.createElement(n, o({}, i, {\n    ref: t\n  }), e.props.children) : e));\n});\nSlot.displayName = \"Slot\";\nconst n = /*#__PURE__*/r.forwardRef((t, o) => {\n  const {\n    children: n,\n    ...i\n  } = t,\n        c = r.Children.only(n);\n  /*#__PURE__*/\n\n  return r.isValidElement(c) ? /*#__PURE__*/r.cloneElement(c, { ...l(i, c.props),\n    ref: e(o, c.ref)\n  }) : null;\n});\nn.displayName = \"SlotClone\";\nexport const Slottable = ({\n  children: e\n}) => e;\n\nfunction l(e, r) {\n  const o = { ...r\n  };\n\n  for (const n in r) {\n    const l = e[n],\n          i = r[n];\n    /^on[A-Z]/.test(n) && (o[n] = t(i, l));\n  }\n\n  return { ...e,\n    ...o\n  };\n}\n\nexport const Root = Slot;","map":{"version":3,"sources":["packages/react/slot/src/Slot.tsx"],"names":["Slot","React","forwardRef","props","forwardedRef","children","slotProps","Children","count","_react","$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone","ref","map","child","isValidElement","type","Slottable","displayName","SlotClone","only","cloneElement","mergeProps","composeRefs","childProps","overrideProps","propName","slotPropValue","childPropValue","test","composeEventHandlers","Root"],"mappings":";;;;OAUA,MAAMA,IAAAA,GAAAA,aAAOC,CAAAA,CAAMC,UAAND,CAAyC,CAACE,CAAD,EAAQC,CAAR,KAAQA;AAC5D,QAAA;AAAMC,IAAAA,QAAAA,EAAEA,CAAR;AAAQA,OAAaC;AAArB,MAAmCH,CAAnC;AAGA,SAAoB,MAFAF,CAAAA,CAAMM,QAANN,CAAeO,KAAfP,CAAqBI,CAArBJ,CAEA,GAFqBI,aAIrCI,CAAAA,CAAAA,aAAAA,CAACC,CAADD,EAAAA,CAAAA,CAAAA,EAAAA,EAAeH,CAAfG,EAAAA;AAA0BE,IAAAA,GAAAA,EAAKP;AAA/BK,GAAAA,CAAAA,EACGJ,CADHI,CAFgB,GAGbJ,aAMLI,CAAAA,CAAAA,aAAAA,CAAAA,CAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACGR,CAAAA,CAAMM,QAANN,CAAeW,GAAfX,CAAmBI,CAAnBJ,EAA8BY,CAAAA,IAAAA,aACzBZ,CAAAA,CAAMa,cAANb,CAAqBY,CAArBZ,KAA+BY,CAAAA,CAAME,IAANF,KAAeG,SAA9Cf,GAA8Ce,aAE9CP,CAAAA,CAAAA,aAAAA,CAACC,CAADD,EAAAA,CAAAA,CAAAA,EAAAA,EAAeH,CAAfG,EAAAA;AAA0BE,IAAAA,GAAAA,EAAKP;AAA/BK,GAAAA,CAAAA,EACGI,CAAAA,CAAMV,KAANU,CAAYR,QADfI,CAFAR,GAQGY,CATRZ,CADHQ,CATF;AAmBaI,CAvBFZ,CAAb;AA6BAD,IAAAA,CAAKiB,WAALjB,GAAmB,MAAnBA;AAQA,MAAMkB,CAAAA,GAAAA,aAAYjB,CAAAA,CAAMC,UAAND,CAAsC,CAACE,CAAD,EAAQC,CAAR,KAAQA;AAC9D,QAAA;AAAMC,IAAAA,QAAAA,EAAEA,CAAR;AAAQA,OAAaC;AAArB,MAAmCH,CAAnC;AAAA,QACMU,CAAAA,GAAQZ,CAAAA,CAAMM,QAANN,CAAekB,IAAflB,CAAoBI,CAApBJ,CADd;AACkCI;;AAElC,SAAOJ,CAAAA,CAAMa,cAANb,CAAqBY,CAArBZ,IAAqBY,aACxBZ,CAAAA,CAAMmB,YAANnB,CAAmBY,CAAnBZ,EAA0B,EAAA,GACrBoB,CAAAA,CAAWf,CAAXe,EAAsBR,CAAAA,CAAMV,KAA5BkB,CADqB;AAExBV,IAAAA,GAAAA,EAAKW,CAAAA,CAAYlB,CAAZkB,EAA2BT,CAAAA,CAAcF,GAAzCW;AAFmB,GAA1BrB,CADGA,GAKH,IALJ;AAKI,CATYA,CAAlB;AAYAiB,CAAAA,CAAUD,WAAVC,GAAwB,WAAxBA;AAAwB,OAMxB,MAAMF,SAAAA,GAAY,CAAA;AAAGX,EAAAA,QAAAA,EAAAA;AAAH,CAAA,KACTA,CADT;;AAQA,SAASgB,CAAT,CAAoBf,CAApB,EAAyCiB,CAAzC,EAAyCA;AAEvC,QAAMC,CAAAA,GAAgB,EAAA,GAAKD;AAAL,GAAtB;;AAGA,OAAK,MAAME,CAAX,IAAuBF,CAAvB,EAAmC;AACjC,UAAMG,CAAAA,GAAgBpB,CAAAA,CAAUmB,CAAVnB,CAAtB;AAAA,UACMqB,CAAAA,GAAiBJ,CAAAA,CAAWE,CAAXF,CADvB;AAEkB,eAAWK,IAAX,CAAgBH,CAAhB,MAGhBD,CAAAA,CAAcC,CAAdD,CAAAA,GAA0BK,CAAAA,CAAqBF,CAArBE,EAAqCH,CAArCG,CAHV;AAOpB;;AAAA,SAAO,EAAA,GAAKvB,CAAL;AAAKA,OAAckB;AAAnB,GAAP;AAA0BA;;AAAAA,OAG5B,MAAMM,IAAAA,GAAO9B,IAAb","sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotProps = { children: React.ReactNode };\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childLength = React.Children.count(children);\n\n  if (childLength === 1) {\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {children}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Slottable) {\n          return (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          );\n        }\n\n        return child;\n      })}\n    </>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotCloneProps = { children: React.ReactNode };\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const child = React.Children.only(children);\n\n  return React.isValidElement(child)\n    ? React.cloneElement(child, {\n        ...mergeProps(slotProps, child.props),\n        ref: composeRefs(forwardedRef, (child as any).ref),\n      })\n    : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return children as React.ReactElement;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  // if it's a handler, modify the override by composing the base handler\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n\n    if (isHandler) {\n      overrideProps[propName] = composeEventHandlers(childPropValue, slotPropValue);\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\n"]},"metadata":{},"sourceType":"module"}