{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GastRefResolverVisitor = exports.resolveGrammar = void 0;\n\nconst parser_1 = require(\"../parser/parser\");\n\nconst forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nconst values_1 = __importDefault(require(\"lodash/values\"));\n\nconst gast_1 = require(\"@chevrotain/gast\");\n\nfunction resolveGrammar(topLevels, errMsgProvider) {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexports.resolveGrammar = resolveGrammar;\n\nclass GastRefResolverVisitor extends gast_1.GAstVisitor {\n  constructor(nameToTopRule, errMsgProvider) {\n    super();\n    this.nameToTopRule = nameToTopRule;\n    this.errMsgProvider = errMsgProvider;\n    this.errors = [];\n  }\n\n  resolveRefs() {\n    (0, forEach_1.default)((0, values_1.default)(this.nameToTopRule), prod => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  visitNonTerminal(node) {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n      this.errors.push({\n        message: msg,\n        type: parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n\n}\n\nexports.GastRefResolverVisitor = GastRefResolverVisitor;","map":{"version":3,"sources":["../../../../src/parse/grammar/resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,MAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAEA,MAAA,MAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAMA,SAAgB,cAAhB,CACE,SADF,EAEE,cAFF,EAEsD;AAEpD,QAAM,WAAW,GAAG,IAAI,sBAAJ,CAA2B,SAA3B,EAAsC,cAAtC,CAApB;AACA,EAAA,WAAW,CAAC,WAAZ;AACA,SAAO,WAAW,CAAC,MAAnB;AACD;;AAPD,OAAA,CAAA,cAAA,GAAA,cAAA;;AASA,MAAa,sBAAb,SAA4C,MAAA,CAAA,WAA5C,CAAuD;AAIrD,EAAA,WAAA,CACU,aADV,EAEU,cAFV,EAE8D;AAE5D;AAHQ,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,cAAA,GAAA,cAAA;AALH,SAAA,MAAA,GAAgD,EAAhD;AAQN;;AAEM,EAAA,WAAW,GAAA;AAChB,KAAA,GAAA,SAAA,CAAA,OAAA,EAAQ,CAAA,GAAA,QAAA,CAAA,OAAA,EAAO,KAAK,aAAZ,CAAR,EAAqC,IAAD,IAAS;AAC3C,WAAK,YAAL,GAAoB,IAApB;AACA,MAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACD,KAHD;AAID;;AAEM,EAAA,gBAAgB,CAAC,IAAD,EAAkB;AACvC,UAAM,GAAG,GAAG,KAAK,aAAL,CAAmB,IAAI,CAAC,eAAxB,CAAZ;;AAEA,QAAI,CAAC,GAAL,EAAU;AACR,YAAM,GAAG,GAAG,KAAK,cAAL,CAAoB,sBAApB,CACV,KAAK,YADK,EAEV,IAFU,CAAZ;AAIA,WAAK,MAAL,CAAY,IAAZ,CAAiB;AACf,QAAA,OAAO,EAAE,GADM;AAEf,QAAA,IAAI,EAAE,QAAA,CAAA,yBAAA,CAA0B,sBAFjB;AAGf,QAAA,QAAQ,EAAE,KAAK,YAAL,CAAkB,IAHb;AAIf,QAAA,iBAAiB,EAAE,IAAI,CAAC;AAJT,OAAjB;AAMD,KAXD,MAWO;AACL,MAAA,IAAI,CAAC,cAAL,GAAsB,GAAtB;AACD;AACF;;AAnCoD;;AAAvD,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GastRefResolverVisitor = exports.resolveGrammar = void 0;\nconst parser_1 = require(\"../parser/parser\");\nconst forEach_1 = __importDefault(require(\"lodash/forEach\"));\nconst values_1 = __importDefault(require(\"lodash/values\"));\nconst gast_1 = require(\"@chevrotain/gast\");\nfunction resolveGrammar(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n}\nexports.resolveGrammar = resolveGrammar;\nclass GastRefResolverVisitor extends gast_1.GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n        super();\n        this.nameToTopRule = nameToTopRule;\n        this.errMsgProvider = errMsgProvider;\n        this.errors = [];\n    }\n    resolveRefs() {\n        (0, forEach_1.default)((0, values_1.default)(this.nameToTopRule), (prod) => {\n            this.currTopLevel = prod;\n            prod.accept(this);\n        });\n    }\n    visitNonTerminal(node) {\n        const ref = this.nameToTopRule[node.nonTerminalName];\n        if (!ref) {\n            const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n            this.errors.push({\n                message: msg,\n                type: parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n                ruleName: this.currTopLevel.name,\n                unresolvedRefName: node.nonTerminalName\n            });\n        }\n        else {\n            node.referencedRule = ref;\n        }\n    }\n}\nexports.GastRefResolverVisitor = GastRefResolverVisitor;\n//# sourceMappingURL=resolver.js.map"]},"metadata":{},"sourceType":"script"}