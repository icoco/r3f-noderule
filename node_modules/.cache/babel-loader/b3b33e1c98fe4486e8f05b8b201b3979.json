{"ast":null,"code":"var _jsxFileName = \"/Users/icoco/Workspace/2022/prj/webgl/r3f-app/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { TransformControls, useCursor } from '@react-three/drei';\nimport { useControls } from 'leva';\nimport create from 'zustand';\nimport './App.css';\nimport * as THREE from 'three'; ///import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\n//import { Canvas,useFrame, extend,  useThree} from 'react-three-fiber';\n\nimport { useLoader, tubeGeometry } from 'react-three-fiber';\nimport circleImg from './assets/circle.png';\nimport { Suspense, useCallback, useMemo, useRef } from 'react'; //extend({OrbitControls})\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStore = create(set => ({\n  target: null,\n  setTarget: target => set({\n    target\n  })\n}));\n\nfunction Box(props) {\n  _s();\n\n  const setTarget = useStore(state => state.setTarget);\n  const [hovered, setHovered] = useState(false);\n  useCursor(hovered);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    onClick: e => setTarget(e.object),\n    onPointerOver: () => setHovered(true),\n    onPointerOut: () => setHovered(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n} // function CameraControls(){\n//   const {\n//     camera,\n//     gl: {domElement}\n//   } = useThree();\n//   const controlsRef = useRef();\n//   useFrame(() => controlsRef.current.update())\n//   return (\n//     <orbitControls\n//       ref={controlsRef}\n//       args={[camera, domElement]}\n//       autoRotate\n//       autoRotateSpeed={-0.2}\n//     />\n//   );\n// }\n\n\n_s(Box, \"Tj+25ykHKCTG5+DClYdjiMdSUL8=\", false, function () {\n  return [useStore, useCursor];\n});\n\n_c = Box;\n\nfunction Points() {\n  _s2();\n\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const bufferRef = useRef();\n  let t = 0;\n  let f = 0.002;\n  let a = 3;\n  const graph = useCallback((x, z) => {\n    return Math.sin(f * (x ** 2 + z ** 2 + t)) * a;\n  }, [t, f, a]);\n  const count = 100;\n  const sep = 1; //@3\n\n  let positions = useMemo(() => {\n    let positions = [];\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        let y = graph(x, z);\n        positions.push(x, y, z);\n      }\n    }\n\n    return new Float32Array(positions);\n  }, [count, sep, graph]);\n  useFrame(() => {\n    if (1 > 0) {\n      return;\n    }\n\n    t += 15;\n    const positions = bufferRef.current.array;\n    let i = 0;\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        positions[i + 1] = graph(x, z);\n        i += 3;\n      }\n    }\n\n    bufferRef.current.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n      attach: \"geometry\",\n      children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        ref: bufferRef,\n        attachObject: ['attributes', 'position'],\n        array: positions,\n        count: positions.length / 3,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      attach: \"material\",\n      map: imgTex,\n      color: 0x00AAFF,\n      size: 0.5,\n      sizeAttenuation: true,\n      transparent: false,\n      alphaTest: 0.5,\n      opacity: 1.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Points, \"ZFKK6XaFpefMvNhgNO6lHhsFqmc=\", false, function () {\n  return [useLoader, useFrame];\n});\n\n_c2 = Points;\n\nfunction NodeTree(args) {\n  console.log('NodeTree args', args);\n  let nodes = args.nodes;\n  let positions = [];\n  let count = nodes.length;\n\n  for (let xi = 0; xi < count; xi++) {\n    let node = nodes[xi];\n    let x = node.x;\n    let y = node.y;\n    let z = node.z;\n    positions.push(x, y, z);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"boxs\", {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        array: positions,\n        count: positions.length / 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n} // render nodes \n\n\n_c3 = NodeTree;\n\nfunction Nodes(args) {\n  const target = args.target;\n  const mode = args.mode;\n  const curve = args.curve;\n  console.log('args', args);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(NodeTree, {\n      args: args\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), target && /*#__PURE__*/_jsxDEV(TransformControls, {\n      object: target,\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"tubeGeometry\", {\n      path: curve,\n      tubularSegments: 70,\n      radius: 0.02,\n      radialSegments: 50,\n      closed: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = Nodes;\n\nfunction AnimationCanvas(args) {\n  _s3();\n\n  const {\n    target,\n    setTarget\n  } = useStore();\n  const {\n    mode\n  } = useControls({\n    mode: {\n      value: 'translate',\n      options: ['translate', 'rotate', 'scale']\n    }\n  });\n  var nodes = [{\n    x: 20,\n    y: 10,\n    z: 10\n  }, {\n    x: 10,\n    y: 10,\n    z: 15\n  }]; // Create a curve based on the points\n\n  const [curve] = useState(() => {\n    // Create an empty array to stores the points\n    let points = []; // Define points along Z axis\n\n    for (let i = 0; i < 50; i += 1) points.push(new THREE.Vector3(1 - Math.random() * 20, 1 - Math.random() * 20, 100 * (i / 4)));\n\n    return new THREE.CatmullRomCurve3(points);\n  });\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    colorManagement: false,\n    camera: {\n      position: [100, 10, 0],\n      fov: 75\n    },\n    onPointerMissed: () => setTarget(null),\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: /*#__PURE__*/_jsxDEV(Points, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(Nodes, {\n        args: {\n          nodes: nodes,\n          target: target,\n          mode: mode,\n          curve: curve\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 8\n      }, this), target && /*#__PURE__*/_jsxDEV(TransformControls, {\n        object: target,\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      makeDefault: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(AnimationCanvas, \"+/rborab+cn8uInRPD8d8gtiT7c=\", false, function () {\n  return [useStore, useControls];\n});\n\n_c5 = AnimationCanvas;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"anim\",\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(AnimationCanvas, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n\n_c6 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Points\");\n$RefreshReg$(_c3, \"NodeTree\");\n$RefreshReg$(_c4, \"Nodes\");\n$RefreshReg$(_c5, \"AnimationCanvas\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"sources":["/Users/icoco/Workspace/2022/prj/webgl/r3f-app/src/App.js"],"names":["useState","Canvas","useFrame","OrbitControls","TransformControls","useCursor","useControls","create","THREE","useLoader","tubeGeometry","circleImg","Suspense","useCallback","useMemo","useRef","useStore","set","target","setTarget","Box","props","state","hovered","setHovered","e","object","Points","imgTex","TextureLoader","bufferRef","t","f","a","graph","x","z","Math","sin","count","sep","positions","xi","zi","y","push","Float32Array","current","array","i","needsUpdate","length","NodeTree","args","console","log","nodes","node","Nodes","mode","curve","AnimationCanvas","value","options","points","Vector3","random","CatmullRomCurve3","position","fov","App"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { Canvas,useFrame } from '@react-three/fiber'\nimport {OrbitControls}  from '@react-three/drei'\nimport {  TransformControls, useCursor } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport create from 'zustand'\n\nimport './App.css';\nimport * as THREE from 'three';\n///import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\n//import { Canvas,useFrame, extend,  useThree} from 'react-three-fiber';\nimport {  useLoader,tubeGeometry   } from 'react-three-fiber';\nimport circleImg from './assets/circle.png';\nimport { Suspense, useCallback, useMemo, useRef } from 'react';\n//extend({OrbitControls})\n\n\n\nconst useStore = create((set) => ({ target: null, setTarget: (target) => set({ target }) }))\n\nfunction Box(props) {\n  const setTarget = useStore((state) => state.setTarget)\n  const [hovered, setHovered] = useState(false)\n  useCursor(hovered)\n  return (\n    <mesh {...props} onClick={(e) => setTarget(e.object)} onPointerOver={() => setHovered(true)} onPointerOut={() => setHovered(false)}>\n      <boxGeometry />\n      <meshNormalMaterial />\n    </mesh>\n  )\n}\n\n \n\n// function CameraControls(){\n//   const {\n//     camera,\n//     gl: {domElement}\n//   } = useThree();\n\n//   const controlsRef = useRef();\n//   useFrame(() => controlsRef.current.update())\n\n//   return (\n//     <orbitControls\n//       ref={controlsRef}\n//       args={[camera, domElement]}\n//       autoRotate\n//       autoRotateSpeed={-0.2}\n//     />\n//   );\n// }\n\nfunction Points() {\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const bufferRef = useRef();\n\n  let t = 0;\n  let f = 0.002;\n  let a = 3;\n  const graph = useCallback((x, z) => {\n    return Math.sin(f * (x ** 2 + z ** 2 + t)) * a;\n  }, [t, f, a])\n\n  const count = 100\n  const sep =  1 //@3\n  let positions = useMemo(() => {\n    let positions = []\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n          let x = sep * (xi - count / 2);\n          let z = sep * (zi - count / 2);\n       \n\n        let y = graph(x, z);\n        positions.push(x, y, z);\n      }\n    }\n\n    return new Float32Array(positions);\n  }, [count, sep, graph])\n\n  useFrame(() => {\n    if (1>0){\n      return \n    }\n    t += 15\n    \n    const positions = bufferRef.current.array;\n\n    let i = 0;\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n\n        positions[i + 1] = graph(x, z);\n        i += 3;\n      }\n    }\n\n    bufferRef.current.needsUpdate = true;\n  })\n\n  return (\n    <points>\n      <bufferGeometry attach=\"geometry\">\n        <bufferAttribute\n          ref={bufferRef}\n          attachObject={['attributes', 'position']}\n          array={positions}\n          count={positions.length / 3}\n          itemSize={3}\n        />\n      </bufferGeometry>\n\n      <pointsMaterial\n        attach=\"material\"\n        map={imgTex}\n        color={0x00AAFF}\n        size={0.5}\n        sizeAttenuation\n        transparent={false}\n        alphaTest={0.5}\n        opacity={1.0}\n      />\n    </points>\n  );\n}\n\nfunction NodeTree(args) {\n  console.log('NodeTree args',args)\n  let nodes = args.nodes;\n  \n    let positions = []\n    let count = nodes.length\n    for (let xi = 0; xi < count; xi++) {\n        let node = nodes[xi]\n        let x = node.x \n        let y = node.y \n        let z = node.z \n        positions.push(x, y, z);\n      }\n    \n \n  return (\n    <boxs>\n      <Box>\n        <bufferAttribute\n          \n          array={positions}\n          count={positions.length / 3}\n         \n        />\n      </Box>\n\n    \n    </boxs>\n  );\n}\n\n// render nodes \nfunction Nodes(args) {\n  const target = args.target\n  const mode = args.mode\n  const curve = args.curve\n  console.log('args',args)\n  return (\n    <mesh   >\n      <NodeTree args={args}  />\n     {/* <Box color=\"red\"  args={[20, 10, 10]}/>\n        <Box position={[20, 10, 10]} />\n        <Box /> */}\n          {target && <TransformControls object={target} mode={mode} />}\n\n        <tubeGeometry\n        path={curve}\n        tubularSegments={70}\n        radius={0.02}\n        radialSegments={50}\n        closed={true} /> \n    </mesh>\n  )\n}\n\nfunction AnimationCanvas(args) {\n  const { target, setTarget } = useStore()\n  const { mode } = useControls({ mode: { value: 'translate', options: ['translate', 'rotate', 'scale'] } })  \n  var nodes = [{x:20,y:10,z:10},{x:10,y:10,z:15}]\n   // Create a curve based on the points\n   const [curve] = useState(() => {\n    // Create an empty array to stores the points\n    let points = []\n    // Define points along Z axis\n    for (let i = 0; i < 50; i += 1)\n      points.push(new THREE.Vector3(1 - Math.random() * 20, 1 - Math.random() * 20, 100 * (i / 4)))\n    return new THREE.CatmullRomCurve3(points)\n    }) \n  return (\n    <Canvas\n      colorManagement={false}\n      camera={{ position: [100, 10, 0], fov: 75 }}\n      onPointerMissed={() => setTarget(null)}\n    >\n      <Suspense fallback={null}>\n        <Points />\n      </Suspense>\n       <mesh> \n       <Nodes args={{nodes:nodes, target:target,mode:mode,curve:curve}}  /> \n       {target && <TransformControls object={target} mode={mode} />}\n      <meshNormalMaterial />\n       </mesh>   \n       \n      {/* <CameraControls/> */}\n      <OrbitControls makeDefault />\n    </Canvas>\n  );\n}\n \n\nfunction App() {\n  \n \n  return (\n    <div className=\"anim\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <AnimationCanvas  />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}