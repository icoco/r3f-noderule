{"ast":null,"code":"import * as o from \"react\";\nexport function composeRefs(...o) {\n  return e => o.forEach(o => function (o, e) {\n    \"function\" == typeof o ? o(e) : null != o && (o.current = e);\n  }(o, e));\n}\nexport function useComposedRefs(...e) {\n  return o.useCallback(composeRefs(...e), e);\n}","map":{"version":3,"sources":["packages/react/compose-refs/src/composeRefs.tsx"],"names":["ref","value","current","composeRefs","refs","node","forEach","setRef","useComposedRefs","React","useCallback"],"mappings":";OAoBA,SAASG,WAAT,CAASA,GAAkBC,CAA3B,EAA2BA;AACzB,SAAQC,CAAAA,IAAYD,CAAAA,CAAKE,OAALF,CAAcJ,CAAAA,IAbpC,UAAmBA,CAAnB,EAAwCC,CAAxC,EAAwCA;AACnB,kBAAA,OAARD,CAAQ,GACjBA,CAAAA,CAAIC,CAAJD,CADiB,GAERA,QAAAA,CAAAA,KACRA,CAAAA,CAAkCE,OAAlCF,GAA4CC,CADpCD,CAFQ;AAYuBO,GAb5C,CAamDP,CAbnD,EAawDK,CAbxD,CAasBD,CAApB;AAAsDC;AAAAA,OAOxD,SAASG,eAAT,CAASA,GAAsBJ,CAA/B,EAA+BA;AAE7B,SAAOK,CAAAA,CAAMC,WAAND,CAAkBN,WAAAA,CAAAA,GAAeC,CAAfD,CAAlBM,EAAwCL,CAAxCK,CAAP;AAA+CL","sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"]},"metadata":{},"sourceType":"module"}