{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;\n\nconst isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nconst flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nconst every_1 = __importDefault(require(\"lodash/every\"));\n\nconst map_1 = __importDefault(require(\"lodash/map\"));\n\nconst forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nconst has_1 = __importDefault(require(\"lodash/has\"));\n\nconst reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nconst interpreter_1 = require(\"./interpreter\");\n\nconst rest_1 = require(\"./rest\");\n\nconst tokens_1 = require(\"../../scan/tokens\");\n\nconst gast_1 = require(\"@chevrotain/gast\");\n\nconst gast_2 = require(\"@chevrotain/gast\");\n\nvar PROD_TYPE;\n\n(function (PROD_TYPE) {\n  PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));\n\nfunction getProdType(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_1.Option) {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof gast_1.Repetition) {\n    return PROD_TYPE.REPETITION;\n  } else if (prod instanceof gast_1.RepetitionMandatory) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof gast_1.Alternation) {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.getProdType = getProdType;\n\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n  const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n\nexports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\n\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\n\nexports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;\n\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = (0, every_1.default)(alts, currAlt => {\n    return (0, every_1.default)(currAlt, currPath => {\n      return currPath.length === 1;\n    });\n  }); // This version takes into account the predicates as well.\n\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (orAlts) {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates = (0, map_1.default)(orAlts, currAlt => currAlt.GATE);\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        const currPredicate = predicates[t];\n\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          } // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n\n\n          return t;\n        } // none of the paths for the current alternative matched\n        // try the next alternative\n\n      } // none of the alternatives could be matched\n\n\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = (0, map_1.default)(alts, currAlt => {\n      return (0, flatten_1.default)(currAlt);\n    });\n    const choiceToAlt = (0, reduce_1.default)(singleTokenAlts, (result, currAlt, idx) => {\n      (0, forEach_1.default)(currAlt, currTokType => {\n        if (!(0, has_1.default)(result, currTokType.tokenTypeIdx)) {\n          result[currTokType.tokenTypeIdx] = idx;\n        }\n\n        (0, forEach_1.default)(currTokType.categoryMatches, currExtendingType => {\n          if (!(0, has_1.default)(result, currExtendingType)) {\n            result[currExtendingType] = idx;\n          }\n        });\n      });\n      return result;\n    }, {});\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n\n    return function () {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          } // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n\n\n          return t;\n        } // none of the paths for the current alternative matched\n        // try the next alternative\n\n      } // none of the alternatives could be matched\n\n\n      return undefined;\n    };\n  }\n}\n\nexports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;\n\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n  const areAllOneTokenLookahead = (0, every_1.default)(alt, currPath => {\n    return currPath.length === 1;\n  });\n  const numOfPaths = alt.length; // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = (0, flatten_1.default)(alt);\n\n    if (singleTokensTypes.length === 1 && (0, isEmpty_1.default)(singleTokensTypes[0].categoryMatches)) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n      return function () {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = (0, reduce_1.default)(singleTokensTypes, (result, currTokType, idx) => {\n        result[currTokType.tokenTypeIdx] = true;\n        (0, forEach_1.default)(currTokType.categoryMatches, currExtendingType => {\n          result[currExtendingType] = true;\n        });\n        return result;\n      }, []);\n      return function () {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function () {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        } // found a full path that matches.\n\n\n        return true;\n      } // none of the paths matched\n\n\n      return false;\n    };\n  }\n}\n\nexports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;\n\nclass RestDefinitionFinderWalker extends rest_1.RestWalker {\n  constructor(topProd, targetOccurrence, targetProdType) {\n    super();\n    this.topProd = topProd;\n    this.targetOccurrence = targetOccurrence;\n    this.targetProdType = targetProdType;\n  }\n\n  startWalking() {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  checkIsTarget(node, expectedProdType, currRest, prevRest) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    } // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n\n\n    return false;\n  }\n\n  walkOption(optionProd, currRest, prevRest) {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(manyProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(manySepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n\n}\n/**\n * Returns the definition of a target production in a top level level rule.\n */\n\n\nclass InsideDefinitionFinderVisitor extends gast_2.GAstVisitor {\n  constructor(targetOccurrence, targetProdType, targetRef) {\n    super();\n    this.targetOccurrence = targetOccurrence;\n    this.targetProdType = targetProdType;\n    this.targetRef = targetRef;\n    this.result = [];\n  }\n\n  checkIsTarget(node, expectedProdName) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === undefined || node === this.targetRef)) {\n      this.result = node.definition;\n    }\n  }\n\n  visitOption(node) {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  visitRepetition(node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  visitRepetitionMandatory(node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  visitRepetitionMandatoryWithSeparator(node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  visitRepetitionWithSeparator(node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  visitAlternation(node) {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n\n}\n\nfunction initializeArrayOfArrays(size) {\n  const result = new Array(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n\n  return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\n\n\nfunction pathToHashKeys(path) {\n  let keys = [\"\"];\n\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n\n      for (let t = 0; t < tokType.categoryMatches.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n\n    keys = longerKeys;\n  }\n\n  return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\n\n\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n  for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  } // None of the SearchPathKeys were found in any of the other alternatives\n\n\n  return true;\n}\n\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n  const partialAlts = (0, map_1.default)(altsDefs, currAlt => (0, interpreter_1.possiblePathsFrom)([currAlt], 1));\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = (0, map_1.default)(partialAlts, currAltPaths => {\n    const dict = {};\n    (0, forEach_1.default)(currAltPaths, item => {\n      const keys = pathToHashKeys(item.partialPath);\n      (0, forEach_1.default)(keys, currKey => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts; // maxLookahead loop\n\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length); // alternatives loop\n\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx]; // paths in current alternative loop\n\n      for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx); // End of the line for this path.\n\n        if (isUnique || (0, isEmpty_1.default)(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx]; // TODO: Can we implement a containsPath using Maps/Dictionaries?\n\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix); // Update all new  keys for the current path.\n\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        } // Expand longer paths\n        else {\n            const newPartialPathsAndSuffixes = (0, interpreter_1.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n            newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes); // Update keys for new known paths\n\n            (0, forEach_1.default)(newPartialPathsAndSuffixes, item => {\n              const prefixKeys = pathToHashKeys(item.partialPath);\n              (0, forEach_1.default)(prefixKeys, key => {\n                altsHashes[altIdx][key] = true;\n              });\n            });\n          }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;\n\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n  const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexports.getLookaheadPathsForOr = getLookaheadPathsForOr;\n\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n  const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n  const afterDef = afterDefWalker.startWalking();\n  const insideFlat = new gast_1.Alternative({\n    definition: insideDef\n  });\n  const afterFlat = new gast_1.Alternative({\n    definition: afterDef\n  });\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;\n\nfunction containsPath(alternative, searchPath) {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n      const matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nexports.containsPath = containsPath;\n\nfunction isStrictPrefixOfPath(prefix, other) {\n  return prefix.length < other.length && (0, every_1.default)(prefix, (tokType, idx) => {\n    const otherTokType = other[idx];\n    return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n  });\n}\n\nexports.isStrictPrefixOfPath = isStrictPrefixOfPath;\n\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n  return (0, every_1.default)(lookAheadPaths, singleAltPaths => (0, every_1.default)(singleAltPaths, singlePath => (0, every_1.default)(singlePath, token => (0, isEmpty_1.default)(token.categoryMatches))));\n}\n\nexports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;","map":{"version":3,"sources":["../../../../src/parse/grammar/lookahead.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;\nconst isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nconst flatten_1 = __importDefault(require(\"lodash/flatten\"));\nconst every_1 = __importDefault(require(\"lodash/every\"));\nconst map_1 = __importDefault(require(\"lodash/map\"));\nconst forEach_1 = __importDefault(require(\"lodash/forEach\"));\nconst has_1 = __importDefault(require(\"lodash/has\"));\nconst reduce_1 = __importDefault(require(\"lodash/reduce\"));\nconst interpreter_1 = require(\"./interpreter\");\nconst rest_1 = require(\"./rest\");\nconst tokens_1 = require(\"../../scan/tokens\");\nconst gast_1 = require(\"@chevrotain/gast\");\nconst gast_2 = require(\"@chevrotain/gast\");\nvar PROD_TYPE;\n(function (PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));\nfunction getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof gast_1.Option) {\n        return PROD_TYPE.OPTION;\n    }\n    else if (prod instanceof gast_1.Repetition) {\n        return PROD_TYPE.REPETITION;\n    }\n    else if (prod instanceof gast_1.RepetitionMandatory) {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    }\n    else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    }\n    else if (prod instanceof gast_1.RepetitionWithSeparator) {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    }\n    else if (prod instanceof gast_1.Alternation) {\n        return PROD_TYPE.ALTERNATION;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexports.getProdType = getProdType;\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokens_1.tokenStructuredMatcherNoCategories\n        : tokens_1.tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\nexports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokens_1.tokenStructuredMatcherNoCategories\n        : tokens_1.tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nexports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = (0, every_1.default)(alts, (currAlt) => {\n        return (0, every_1.default)(currAlt, (currPath) => {\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function (orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            const predicates = (0, map_1.default)(orAlts, (currAlt) => currAlt.GATE);\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                const currPredicate = predicates[t];\n                if (currPredicate !== undefined && currPredicate.call(this) === false) {\n                    // if the predicate does not match there is no point in checking the paths\n                    continue;\n                }\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        const singleTokenAlts = (0, map_1.default)(alts, (currAlt) => {\n            return (0, flatten_1.default)(currAlt);\n        });\n        const choiceToAlt = (0, reduce_1.default)(singleTokenAlts, (result, currAlt, idx) => {\n            (0, forEach_1.default)(currAlt, (currTokType) => {\n                if (!(0, has_1.default)(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                (0, forEach_1.default)(currTokType.categoryMatches, (currExtendingType) => {\n                    if (!(0, has_1.default)(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, {});\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            const nextToken = this.LA(1);\n            return choiceToAlt[nextToken.tokenTypeIdx];\n        };\n    }\n    else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nexports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = (0, every_1.default)(alt, (currPath) => {\n        return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        const singleTokensTypes = (0, flatten_1.default)(alt);\n        if (singleTokensTypes.length === 1 &&\n            (0, isEmpty_1.default)(singleTokensTypes[0].categoryMatches)) {\n            const expectedTokenType = singleTokensTypes[0];\n            const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n            return function () {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n            };\n        }\n        else {\n            const choiceToAlt = (0, reduce_1.default)(singleTokensTypes, (result, currTokType, idx) => {\n                result[currTokType.tokenTypeIdx] = true;\n                (0, forEach_1.default)(currTokType.categoryMatches, (currExtendingType) => {\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function () {\n                const nextToken = this.LA(1);\n                return choiceToAlt[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    }\n    else {\n        return function () {\n            nextPath: for (let j = 0; j < numOfPaths; j++) {\n                const currPath = alt[j];\n                const currPathLength = currPath.length;\n                for (let i = 0; i < currPathLength; i++) {\n                    const nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        // mismatch in current path\n                        // try the next pth\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nexports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;\nclass RestDefinitionFinderWalker extends rest_1.RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n        super();\n        this.topProd = topProd;\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            super.walkOption(optionProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            super.walkOption(atLeastOneProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(atLeastOneSepProd, currRest, prevRest);\n        }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            super.walkOption(manyProd, currRest, prevRest);\n        }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(manySepProd, currRest, prevRest);\n        }\n    }\n}\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends gast_2.GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n        super();\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n        this.targetRef = targetRef;\n        this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdName &&\n            (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    }\n    visitOption(node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n}\nfunction initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for (let i = 0; i < size; i++) {\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n    let keys = [\"\"];\n    for (let i = 0; i < path.length; i++) {\n        const tokType = path[i];\n        const longerKeys = [];\n        for (let j = 0; j < keys.length; j++) {\n            const currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for (let t = 0; t < tokType.categoryMatches.length; t++) {\n                const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n            const searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = (0, map_1.default)(altsDefs, (currAlt) => (0, interpreter_1.possiblePathsFrom)([currAlt], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = (0, map_1.default)(partialAlts, (currAltPaths) => {\n        const dict = {};\n        (0, forEach_1.default)(currAltPaths, (item) => {\n            const keys = pathToHashKeys(item.partialPath);\n            (0, forEach_1.default)(keys, (currKey) => {\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    let newData = partialAlts;\n    // maxLookahead loop\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n        const currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        // alternatives loop\n        for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n            const currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n                const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                const prefixKeys = pathToHashKeys(currPathPrefix);\n                const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique || (0, isEmpty_1.default)(suffixDef) || currPathPrefix.length === k) {\n                    const currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for (let j = 0; j < prefixKeys.length; j++) {\n                            const currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                }\n                // Expand longer paths\n                else {\n                    const newPartialPathsAndSuffixes = (0, interpreter_1.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    (0, forEach_1.default)(newPartialPathsAndSuffixes, (item) => {\n                        const prefixKeys = pathToHashKeys(item.partialPath);\n                        (0, forEach_1.default)(prefixKeys, (key) => {\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return finalResult;\n}\nexports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nexports.getLookaheadPathsForOr = getLookaheadPathsForOr;\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new gast_1.Alternative({ definition: insideDef });\n    const afterFlat = new gast_1.Alternative({ definition: afterDef });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nexports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;\nfunction containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n        const otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for (let j = 0; j < otherPath.length; j++) {\n            const searchTok = searchPath[j];\n            const otherTok = otherPath[j];\n            const matchingTokens = searchTok === otherTok ||\n                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nexports.containsPath = containsPath;\nfunction isStrictPrefixOfPath(prefix, other) {\n    return (prefix.length < other.length &&\n        (0, every_1.default)(prefix, (tokType, idx) => {\n            const otherTokType = other[idx];\n            return (tokType === otherTokType ||\n                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);\n        }));\n}\nexports.isStrictPrefixOfPath = isStrictPrefixOfPath;\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n    return (0, every_1.default)(lookAheadPaths, (singleAltPaths) => (0, every_1.default)(singleAltPaths, (singlePath) => (0, every_1.default)(singlePath, (token) => (0, isEmpty_1.default)(token.categoryMatches))));\n}\nexports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;\n//# sourceMappingURL=lookahead.js.map"]},"metadata":{},"sourceType":"script"}