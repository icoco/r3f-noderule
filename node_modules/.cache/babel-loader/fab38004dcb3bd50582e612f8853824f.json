{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\n\nconst model_1 = require(\"./model\");\n\nclass GAstVisitor {\n  visit(node) {\n    const nodeAny = node;\n\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n\n      /* istanbul ignore next */\n\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitNonTerminal(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitAlternative(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitOption(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitRepetition(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitRepetitionMandatory(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitRepetitionMandatoryWithSeparator(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitRepetitionWithSeparator(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitAlternation(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitTerminal(node) {}\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  visitRule(node) {}\n\n}\n\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"sources":["../../src/visitor.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAcA,MAAsB,WAAtB,CAAiC;AACxB,EAAA,KAAK,CAAC,IAAD,EAAkB;AAC5B,UAAM,OAAO,GAAQ,IAArB;;AACA,YAAQ,OAAO,CAAC,WAAhB;AACE,WAAK,OAAA,CAAA,WAAL;AACE,eAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;;AACF,WAAK,OAAA,CAAA,WAAL;AACE,eAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;;AACF,WAAK,OAAA,CAAA,MAAL;AACE,eAAO,KAAK,WAAL,CAAiB,OAAjB,CAAP;;AACF,WAAK,OAAA,CAAA,mBAAL;AACE,eAAO,KAAK,wBAAL,CAA8B,OAA9B,CAAP;;AACF,WAAK,OAAA,CAAA,gCAAL;AACE,eAAO,KAAK,qCAAL,CAA2C,OAA3C,CAAP;;AACF,WAAK,OAAA,CAAA,uBAAL;AACE,eAAO,KAAK,4BAAL,CAAkC,OAAlC,CAAP;;AACF,WAAK,OAAA,CAAA,UAAL;AACE,eAAO,KAAK,eAAL,CAAqB,OAArB,CAAP;;AACF,WAAK,OAAA,CAAA,WAAL;AACE,eAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;;AACF,WAAK,OAAA,CAAA,QAAL;AACE,eAAO,KAAK,aAAL,CAAmB,OAAnB,CAAP;;AACF,WAAK,OAAA,CAAA,IAAL;AACE,eAAO,KAAK,SAAL,CAAe,OAAf,CAAP;;AACF;;AACA;AACE,cAAM,KAAK,CAAC,sBAAD,CAAX;AAvBJ;AAyBD;AAED;;;AACO,EAAA,gBAAgB,CAAC,IAAD,EAAkB,CAAS;AAElD;;;AACO,EAAA,gBAAgB,CAAC,IAAD,EAAkB,CAAS;AAElD;;;AACO,EAAA,WAAW,CAAC,IAAD,EAAa,CAAS;AAExC;;;AACO,EAAA,eAAe,CAAC,IAAD,EAAiB,CAAS;AAEhD;;;AACO,EAAA,wBAAwB,CAAC,IAAD,EAA0B,CAAS;AAElE;;;AACO,EAAA,qCAAqC,CAC1C,IAD0C,EACJ,CAC/B;AAET;;;AACO,EAAA,4BAA4B,CAAC,IAAD,EAA8B,CAAS;AAE1E;;;AACO,EAAA,gBAAgB,CAAC,IAAD,EAAkB,CAAS;AAElD;;;AACO,EAAA,aAAa,CAAC,IAAD,EAAe,CAAS;AAE5C;;;AACO,EAAA,SAAS,CAAC,IAAD,EAAW,CAAS;;AA5DL;;AAAjC,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GAstVisitor = void 0;\nconst model_1 = require(\"./model\");\nclass GAstVisitor {\n    visit(node) {\n        const nodeAny = node;\n        switch (nodeAny.constructor) {\n            case model_1.NonTerminal:\n                return this.visitNonTerminal(nodeAny);\n            case model_1.Alternative:\n                return this.visitAlternative(nodeAny);\n            case model_1.Option:\n                return this.visitOption(nodeAny);\n            case model_1.RepetitionMandatory:\n                return this.visitRepetitionMandatory(nodeAny);\n            case model_1.RepetitionMandatoryWithSeparator:\n                return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n            case model_1.RepetitionWithSeparator:\n                return this.visitRepetitionWithSeparator(nodeAny);\n            case model_1.Repetition:\n                return this.visitRepetition(nodeAny);\n            case model_1.Alternation:\n                return this.visitAlternation(nodeAny);\n            case model_1.Terminal:\n                return this.visitTerminal(nodeAny);\n            case model_1.Rule:\n                return this.visitRule(nodeAny);\n            /* istanbul ignore next */\n            default:\n                throw Error(\"non exhaustive match\");\n        }\n    }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitNonTerminal(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitAlternative(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitOption(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitRepetition(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitRepetitionMandatory(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitRepetitionMandatoryWithSeparator(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitRepetitionWithSeparator(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitAlternation(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitTerminal(node) { }\n    /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n    visitRule(node) { }\n}\nexports.GAstVisitor = GAstVisitor;\n//# sourceMappingURL=visitor.js.map"]},"metadata":{},"sourceType":"script"}